// В Prisma, когда вы определяете отношение между двумя моделями,
// вы можете использовать поля из одной модели в качестве внешних ключей в другой модели.
// Однако, в вашем случае, вы хотите, чтобы поле telegramId
// в модели Profile автоматически получало значение из поля telegramId модели User.
// Это непосредственно не поддерживается Prisma в том виде,
// как вы описали, поскольку Prisma не предоставляет механизма д
// ля автоматического копирования значений из одного поля
// в другое при создании или обновлении записей.

// Однако, вы можете реализовать эту логику на уровне вашего приложения.
// Когда вы создаете или обновляете запись в модели Profile, вы можете сначала получить
// значение telegramId из соответствующей записи в модели User,
// а затем использовать это значение при создании или обновлении записи в модели Profile.

async function createProfileForUser(userId, prisma) {
	// Получаем пользователя по его ID
	const user = await prisma.user.findUnique({ where: { id: userId } })

	// Создаем профиль для пользователя, используя telegramId из пользователя
	const profile = await prisma.profile.create({
		data: {
			userId: userId,
			telegramId: user.telegramId, // Используем telegramId из пользователя
			// Здесь могут быть другие поля профиля
		},
	})

	return profile
}

// Если вы хотите, чтобы при создании пользователя автоматически создавался и профиль,
// вам нужно будет реализовать эту логику в вашем приложении.
// Это можно сделать, например, в функции, которая создает пользователя,
// и сразу после создания пользователя вызывать функцию для создания профиля.

// Вот пример функции, которая создает пользователя и профиль:
async function createUserWithProfile(prisma, userData, profileData) {
	// Создаем пользователя
	const user = await prisma.user.create({
		data: userData,
	})

	// Создаем профиль для пользователя
	const profile = await prisma.profile.create({
		data: {
			...profileData,
			userId: user.id, // Связываем профиль с только что созданным пользователем
		},
	})

	return { user, profile }
}

// заполнил ли пользователь профиль:
async function isProfileFilled(userId, prisma) {
	// Пытаемся найти профиль пользователя по userId
	const profile = await prisma.profile.findUnique({
		where: {
			userId: userId,
		},
	})

	// Если профиль найден, возвращаем true, иначе false
	return !!profile
}
